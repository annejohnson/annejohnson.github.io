---
layout: post
title:  "Octopress and Octofound"
date:   2014-04-04 12:10:36
categories: programming Ruby
---
[Octopress](http://octopress.org/) is a blogging-optimized static website generator built on top of [Jekyll](http://jekyllrb.com/). I recently began toying with it as an alternative to WordPress, which is what currently powers my site. The difference between the two can be summed up as follows:

- **Static website generators** operate on an individual computer and use a series of text and template files to generate HTML pages. These can then be uploaded to a server. They are "static" because they consist of simply HTML, CSS, and Javascript. There is no backend to speak of, i.e. no database to communicate with. When someone goes to a webpage created in this way, the webpage loads very, very quickly because the only processing that needs to happen is content display. Content does not need to be fetched from a database first.

- WordPress is **database-driven**, like Drupal, Joomla, and others. When someone goes to a WordPress webpage, PHP script needs to be processed, content needs to be fetched from a database, and then content needs to be displayed. These systems are innately slower because there are more steps involved.

##Octopress vs. WordPress
For many people, Octopress would be the better choice. Here's why:

- Pages generated by Octopress load very quickly - **_usually instantaneously!_** This certainly isn't the case for pages on WordPress sites.

- Octopress is based on the **Ruby** programming language, which is beautiful, simple, and intuitive. PHP - the programming language used by WordPress - is much less charming.

- In Octopress, **_everything I do is in the command line and a text editor_**. This makes it extremely fun, simple, and hackery. WordPress is clunkier because I have to use a browser to blog or create pages, FTP and a text editor to change the template, and the command line to process SASS. It feels a bit all over the place.

Despite Octopress's enticing characteristics, I personally decided on WordPress. Here are the pro's of using WordPress:

- **Employability**. Static site generators are not appropriate for client work because they do not contain a user-friendly way to edit content - which is a must when you're building a website for someone who isn't knee-deep in code every day.

- Because the content of my WordPress site lives in a database on a web server, **_I can add content to my site from any computer with an internet connection_** - or from my phone, from e-mail, etc. With static site generators, you need access to your personal computer or else it's hopeless.

- It's **easier to troubleshoot problems** with WordPress because it's more widely used. Just about any WordPress issue can be quickly solved by a Google search.

##But Octopress, Wait!
Prior to settling on WordPress, **I decided to create an Octopress theme as a way to learn more about Octopress's capabilities and functionality**. I had also noticed that there wasn't yet a Foundation theme available for Octopress ([Foundation](http://foundation.zurb.com/) is a framework of SASS/CSS and Javascript that speeds up the creation of responsive templates). This was a convenient way to learn how to use the newly released Foundation 5, which is a little different from Foundation 3.2.5 (the version I use for work). **[Here's a link to the finished theme, Octofound!](http://octofound.annekjohnson.com/)** Check it out, and continue reading to learn about the process.

##Making a Foundation 5 Theme for Octopress
I first had to **install Foundation 5** on my computer. This was a messy and error-ridden process because I already had an older version of Foundation, and the name of the gem (Ruby libraries are called gems) changed between versions 4 and 5. I could only get the install to work by completely removing my old version of Foundation first. (I then had to reinstall that old version on top of the new version since I need the old version for work.)

Next, **I made a dummy Foundation project and studied the structure of the files**. This has changed a little bit from the older version. Now, in addition to a SASS folder, a stylesheets folder, and a config.rb file, there is also a folder called bower\_components and a file called bower.json. Bower\_components contains all the Foundation styles and Javascripts. Also, in the config.rb file, there is now a line that must be included to specify the path to the bower components. 

Seeing how that worked enabled me to **incorporate the Foundation files into Octopress**. I started with the default Octopress theme and deleted all of its SASS files. I dragged and dropped bower\_components and bower.json into Octopress's root directory, created a SASS file containing a line to import Foundation, and then updated Octopress's config.rb. After that, I faced a long series of errors during stylesheet generation at the import line in the SASS file about how foundation couldn't be found. So, I added Foundation to Octopress's Gemfile, found an error I had made in config.rb, and made sure the bower\_components folder was properly populated (it wasn't), and then, it worked! Foundation 5's styles were being incorporated. This was a happy moment.

From there, it was mostly smooth sailing. I **modified the old theme's template files to incorporate Foundation 5**. This meant adding classes like "large-8" (a Foundation 5 grid class that causes an element to be 8 columns wide on large screens) and "small-12" (12 columns wide on small screens) to main sections and sidebars. Foundation really simplifies everything! I also converted Octopress's navigation to Foundation 5's responsive top-bar.

Upon adding Foundation's top-bar, I noticed that the jQuery powering the bar on small screen sizes wasn't working... and I needed to get it working if I wanted the bar to be responsive. First, I made sure that jQuery itself was properly included and that the $(document).ready() and .foundation() functions were properly called. Next, I experimented with re-ordering the inclusion of the different scripts... This turned out to be the issue.

From there, it was truly smooth sailing! I spent a lot of time **polishing the theme and adding useful variables to the SASS files to make it easier for people to customize**. I also **incorporated subtitle functionality and options to display the sidebar on the left or the right, or to hide the sidebar completely**. Lastly, I incorporated my favorite icon font, **[Font Awesome](http://fortawesome.github.io/Font-Awesome/)**, as a way to add some imagery.

When I felt the theme was finished and polished, I had to learn more about Git. Git is a tool that enables you to selectively do source control on code across many different files and directories. I had to **create a Git repository** of just the theme files, ignoring files unique to only my Octopress installation (post files, for example). Once I made sure everything was properly staged, I committed and **pushed it all onto a [GitHub repository](https://github.com/annejohnson/octofound)**, which is where people can go to download my theme.  

Git is great because it also facilitates collaboration. With Git, someone can clone my theme, make improvements, and then send me a pull request. If I like the changes they made, I will incorporate them into my repository. Octopress itself is accessed through a [GitHub repository](https://github.com/imathis/octopress) that has been contributed to by many different people.

Even if I don't use Octopress for more than occasional play, I'm really happy to have learned more about it! It's a beautifully designed system that powers an ever-increasing number of websites by brilliant people, and using it has taught me so much about the processes of creating, troubleshooting, and launching!