---
layout: post
title:  "Switching Careers"
date:   2014-03-21 11:47:36
categories: programming technology career
---
I recently did a career switch from evolutionary biology academia to technology. It was sudden and quasi-awkward, but it was an excellent decision for me personally. I'm writing this post to A) tell the story, and B) offer advice to others interested in doing a career switch.

##Why I Did It

A few months ago, I was working in an evolutionary biology lab that I had started working in as an undergraduate. I enjoyed the work and loved my co-workers, and I was planning to continue on in the field of academic biology and obtain a Ph.D. At a certain point, however, I realized that this wasn’t the right field for me after all.

I want to do work that is constantly stimulating and constantly rewarding (to the extent possible). Scientific research, unfortunately, doesn’t tend to be. Though it has moments that are extremely rewarding (like when a discovery is made, when you get to do field work, or when you publish a paper), it is generally slow and tedious between those. I also want to be able to live wherever I want — maybe near my aging parents, or in a city I’ve always found interesting, or in a place where I like the climate. My father having had serious colon cancer the year prior was a serious gamechanger for me. It made me realize that I absolutely do not want to be far from my parents should something horrible like that happen again. Unfortunately, in academia, you specialize to the point where there are only a few positions in the country that you are best suited for, leaving your options limited. I’m also interested in good pay, a reasonable work schedule, and general financial and career stability in the foreseeable future. Academic biology is not very conducive to these preferences… but technology is to all of them! After much reflection and research, I committed to making the switch.

##How I Did It

First, I began spending my evenings learning tech skills. I refreshed on the HTML, CSS, and PHP includes that I had done for fun during middle and high school. (Sidenote: I knew what HTML stood for in 6th grade. When I leaked out that secret in class one day, my classmates gave me awkward looks that I remember to this day.) Web development is an excellent way to get into tech, and these are foundational skills for anyone interested in web development. Here is the generalized step-by-step list of how I learned these skills back in the day:

- I used online resources to learn **_basic HTML and CSS_**. I recommend [Codecademy](http://www.codecademy.com/) for someone getting started today. I began with a [Xanga](http://xanga.com/) blog (if I were doing this nowadays, I would instead use [Tumblr](http://www.tumblr.com/)), which can serve as a good playground for experimenting with custom CSS and HTML (which I learned about in piecemeal by Googling on how to make certain style changes). I also made simple static website files, like index.html and style.css, on my computer using a text editor. I could then open these up in a browser.

- **_Found hosting._** I started off with extremely crappy and slow web space with unattractive addresses (like yoursitehere.awardspace.com, etc. - no offense, Awardspace - I love you!) -- because this kind of hosting is free. Crappy as it was, this free web space enabled me to learn how to make my HTML files accessible to the broader world using FTP (File Transfer Protocol). Do a Google search on free web hosting, and you will find similar free hosting to serve as learning space. Make sure to learn how to use an **_FTP client_** (I recommend [Cyberduck](http://cyberduck.io/) for Mac-users), too, as this makes it easy to upload files to your web space.

- **_Used PHP to include header and footer files onto my pages._** This made it so that if I wanted to change my header, I would only have to change one file (header.php) rather than multiple (index, about, portfolio, etc.). [Here's a good, simple tutorial on how to do this](http://php.about.com/od/tutorials/ht/template_site.htm).

Those steps enabled me to set up a simple portfolio website. Then, in college, these skills went dormant as I focused on my scientific coursework. I did take an introductory programming course that taught Python. To someone trying to make a career switch, I would suggest the free PHP, Javascript, Ruby, or Python courses on [Codecademy](http://www.codecademy.com/) as a way to similarly **_learn basic programming concepts_**.

I graduated from college in 2013 and worked in biology for a few months before deciding to get into tech. At this point, after refreshing on the skills above, I learned **_PHP beyond just includes_**. PHP is the programming language used by WordPress. WordPress is one of the most popular content management systems (CMS's) in the world, the CMS of my former website, and the CMS with which I worked in my first-ever tech job! I got started with PHP using [this awesome tutorial](http://devzone.zend.com/6/php-101-php-for-the-absolute-beginner/).

Next, I decided to take a stab at **_making a WordPress website_** with a custom theme. For the first time ever, I **_paid for hosting and bought a domain name_**. I did this all through [BlueHost](http://www.bluehost.com/). The investment made me feel more committed to seeing the project through. It also eliminated the frustrations associated with slow free web hosting. If you're interested in buying web hosting for a WordPress site, just make sure the hosting plan allows PHP and gives you MySQL databases (you only need one, but more is better in case you decide to have multiple WordPress installations). Because WordPress is so popular, many web hosting plans will install WordPress for you. This is the case with BlueHost, where all you have to do is click on a WordPress button, and it sets everything up for you. Otherwise, you'll need to upload the WordPress files yourself using FTP, create a MySQL database, create a database username/password and add them to that database, and navigate in your browser to where you've uploaded the WordPress files. A page will come up and prompt you for your database name, username, password, and hostname (usually 'localhost').

A good way to begin learning how to make WordPress themes is by **_modifying an existing theme_**. Activate the theme you want to modify by navigating to yoursite.com/wp-admin/, logging in, and then going to Appearances >> Themes. Then, using FTP, navigate from the root directory to wp-content/themes/yourtheme. I played with [Twenty Twelve](https://wordpress.org/themes/twentytwelve), though just about any popular WordPress theme would be an equally good choice. Inside the theme directory, you'll see several different files. Start by looking at index.php, page.php, header.php, and footer.php. It's okay if you don't understand much in these files. I didn't understand anything at all. To get started with customization in a way that doesn't require diving into WordPress functions and queries, I suggest **_opening style.css, deleting everything in there, and styling it all yourself from scratch_**. See what is possible through styling alone. This will also help you understand how the .php files generate the various elements that appear on different pages of your site.

From there, maybe start by mastering a WordPress site of only pages. Then, you only have to A) style; B) create pages in wp-admin; and C) look at header.php, footer.php, page.php, content.php, and maybe content-page.php.

Then, add a blog and study index.php and maybe content.php, single.php, and content-single.php.

Next, try to understand archives by looking at files like tag.php, archive.php, and category.php.

Lastly, experiment with custom post type creation, with which you can have Portfolio Items, Testimonials, Poems, etc. From there, the world is your oyster. Don't forget to explore custom taxonomies (I had a custom taxonomy called 'Project Type' that I used with a custom post type 'Portfolio'), queries (I've coded websites with a custom post type 'Testimonial' and used queries to display 2 random testimonials on a sidebar widget), and widget creation.

Very early on in my own WordPress exploration -- when I hadn't done more than customize styles.css, header.php, and footer.php -- I contacted a local web development company to ask if they had any interest in interns. They did! They started me out with a static web page, then a simple WordPress website, then a more complicated WordPress website in collaboration with an experienced developer, and then increasingly complicated WordPress websites that I've been doing myself. Don't be afraid to similarly reach out! I'm so glad I did. **_It seems like we become employable in tech not by achieving mastery, but by demonstrating potential -- which happens much earlier than you would think._** The sooner you get your foot in the door somewhere, the more accelerated your learning becomes. My WordPress learning was slow and clunky at first but took off once I joined that company. From that point on, I was able to troubleshoot problems more quickly because I was around experienced developers who were able to point me in the right direction.

Once I started working as a WordPress developer, I made enough more per hour that I could afford to work only part time. That allowed me to begin taking online computer science courses through North Carolina State University on the side to earn a [computer programming certificate](http://engineeringonline.ncsu.edu/PS/CPC.html). It encompasses the coursework of a bachelor's in computer science and meets prerequisites for computer science graduate school programs. 

**With nothing more than toying around with code in my spare time and having a blast, I've been able to totally turn my life in a different direction.** I look forward to what lies ahead for me in this exciting field. If you are in similar shoes, say at the beginning of your career-switching journey, I encourage [you to reach out to me](http://twitter.com/depaysant) for anything at all - encouragement, advice, etc.
